# Generated by Django 4.2.17 on 2025-01-27 15:11

import json
import logging

from django.contrib.gis.geos import GEOSGeometry
from django.db import migrations

logger = logging.getLogger(__name__)


def migrate_project_point_field(apps, schema_editor):
    Project = apps.get_model("a4projects", "Project")

    for project in Project.objects.exclude(point__isnull=True):
        try:
            # Handle case where point is already parsed (dict) or still a string
            point_data = project.point
            if isinstance(point_data, str):
                point_data = json.loads(point_data)
                point_data = dict(point_data)

            # Extract geometry and properties
            geometry = point_data.get("geometry", {})
            properties = point_data.get("properties", {})

            # Create GEOSGeometry from coordinates
            if geometry.get("type") == "Point" and "coordinates" in geometry:
                geojson = {"type": "Point", "coordinates": geometry["coordinates"]}
                point = GEOSGeometry(json.dumps(geojson), srid=4326)

                # Update all fields
                Project.objects.filter(id=project.id).update(
                    geos_point=point,
                    street_name=properties.get("strname", ""),
                    house_number=properties.get("hsnr", ""),
                    zip_code=properties.get("plz", ""),
                )

        except (ValueError, TypeError, KeyError, json.JSONDecodeError) as e:
            logger.warning(f"Skipping {project.id} {project.name}: {str(e)}")


class Migration(migrations.Migration):

    dependencies = [
        ("a4projects", "0048_project_geos_point_project_house_number_and_more"),
    ]

    operations = [
        migrations.RunPython(
            migrate_project_point_field, reverse_code=migrations.RunPython.noop
        ),
    ]
