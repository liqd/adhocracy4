import json

from django.conf import settings
from django.urls import reverse
from django.utils.html import format_html


def get_map_settings(**kwargs):
    map_settings = {
        "mapboxToken": "",
        "omtToken": "",
        "attribution": "",
        "useVectorMap": 0,
        "baseUrl": settings.A4_MAP_BASEURL,
        **kwargs,
    }

    if hasattr(settings, "A4_MAP_ATTRIBUTION"):
        map_settings["attribution"] = settings.A4_MAP_ATTRIBUTION

    if hasattr(settings, "A4_USE_VECTORMAP") and settings.A4_USE_VECTORMAP:
        map_settings["useVectorMap"] = 1

    if hasattr(settings, "A4_MAPBOX_TOKEN"):
        map_settings["mapboxToken"] = settings.A4_MAPBOX_TOKEN

    if hasattr(settings, "A4_OPENMAPTILES_TOKEN"):
        map_settings["omtToken"] = settings.A4_OPENMAPTILES_TOKEN

    # Filter out the keys that have a value of ""
    return {key: val for key, val in map_settings.items() if val != ""}


def react_tag_factory(tag_name, api_url_name=None):
    """
    :param tag_name: The name of the template tag.
    :param api_url_name: The name of the API URL (optional).
    :return: A formatted HTML string containing the React tag with required props.

    This method creates a function that generates a React tag with the given name and
    attributes. It takes the following parameters:

    If the `api_url_name` parameter is provided, the `module` parameter must also be
    provided. Otherwise, a `ValueError` is raised.

    The function generated by this method takes a variable number of keyword arguments,
    which are used to populate the attributes of the React tag. If the `module`
    parameter is provided and the keyword argument "polygon" is not included, the
    function automatically adds the "polygon" attribute using the `polygon` setting
    from the `module` object.
    """

    def func(**kwargs):
        module = kwargs.pop("module", None)
        if module and "polygon" not in kwargs:
            kwargs["polygon"] = module.settings_instance.polygon

        attributes = {"map": get_map_settings(**kwargs)}
        if api_url_name:
            if not module:
                raise ValueError("Module must be provided if api_url_name is provided")
            attributes["apiUrl"] = reverse(
                api_url_name, kwargs={"module_pk": module.pk}
            )

        return format_html(
            f'<div data-mb-widget="{tag_name}" data-attributes="{{attributes}}"></div>',
            attributes=json.dumps(attributes),
        )

    # set the correct name on the function
    func.__name__ = tag_name
    return func
